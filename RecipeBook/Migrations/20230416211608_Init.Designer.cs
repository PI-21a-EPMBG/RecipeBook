// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RecipeBook.db;

#nullable disable

namespace RecipeBook.Migrations
{
    [DbContext(typeof(RecipesContext))]
    [Migration("20230416211608_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("RecipeBook.Models.Cookery", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "IX_cookery_id")
                        .IsUnique();

                    b.ToTable("cookery", (string)null);
                });

            modelBuilder.Entity("RecipeBook.Models.Dish", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<long>("CookeryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("cookery_id");

                    b.Property<long?>("CookingTime")
                        .HasColumnType("INTEGER")
                        .HasColumnName("cooking_time");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<long?>("Recipe")
                        .HasColumnType("INTEGER")
                        .HasColumnName("recipe");

                    b.HasKey("Id");

                    b.HasIndex("CookeryId");

                    b.HasIndex(new[] { "Id" }, "IX_dish_id")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "IX_dish_name")
                        .IsUnique();

                    b.ToTable("dish", (string)null);
                });

            modelBuilder.Entity("RecipeBook.Models.DishIngridient", b =>
                {
                    b.Property<long>("DishId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("dish_id");

                    b.Property<long>("IngridientId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ingridient_id");

                    b.Property<long>("MeasureUnitId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("measure_unit_id");

                    b.Property<long>("Quantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quantity");

                    b.HasIndex("DishId");

                    b.HasIndex("IngridientId");

                    b.HasIndex("MeasureUnitId");

                    b.ToTable("dish_ingridients", (string)null);
                });

            modelBuilder.Entity("RecipeBook.Models.DishTag", b =>
                {
                    b.Property<long>("DishId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("dish_id");

                    b.Property<long>("TagId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tag_id");

                    b.HasIndex("DishId");

                    b.HasIndex("TagId");

                    b.ToTable("dish_tag", (string)null);
                });

            modelBuilder.Entity("RecipeBook.Models.Favorite", b =>
                {
                    b.Property<string>("DateAdded")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("date_added");

                    b.Property<long>("DishId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("dish_id");

                    b.HasIndex(new[] { "DishId" }, "IX_favorites_dish_id")
                        .IsUnique();

                    b.ToTable("favorites", (string)null);
                });

            modelBuilder.Entity("RecipeBook.Models.Ingridient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "IX_ingridient_id")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "IX_ingridient_name")
                        .IsUnique();

                    b.ToTable("ingridient", (string)null);
                });

            modelBuilder.Entity("RecipeBook.Models.MeasureUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "IX_measure_unit_id")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "IX_measure_unit_name")
                        .IsUnique();

                    b.ToTable("measure_unit", (string)null);
                });

            modelBuilder.Entity("RecipeBook.Models.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "IX_tags_id")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "IX_tags_name")
                        .IsUnique();

                    b.ToTable("tags", (string)null);
                });

            modelBuilder.Entity("RecipeBook.Models.Dish", b =>
                {
                    b.HasOne("RecipeBook.Models.Cookery", "Cookery")
                        .WithMany("Dishes")
                        .HasForeignKey("CookeryId")
                        .IsRequired();

                    b.Navigation("Cookery");
                });

            modelBuilder.Entity("RecipeBook.Models.DishIngridient", b =>
                {
                    b.HasOne("RecipeBook.Models.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId")
                        .IsRequired();

                    b.HasOne("RecipeBook.Models.Ingridient", "Ingridient")
                        .WithMany()
                        .HasForeignKey("IngridientId")
                        .IsRequired();

                    b.HasOne("RecipeBook.Models.MeasureUnit", "MeasureUnit")
                        .WithMany()
                        .HasForeignKey("MeasureUnitId")
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Ingridient");

                    b.Navigation("MeasureUnit");
                });

            modelBuilder.Entity("RecipeBook.Models.DishTag", b =>
                {
                    b.HasOne("RecipeBook.Models.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId")
                        .IsRequired();

                    b.HasOne("RecipeBook.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("RecipeBook.Models.Favorite", b =>
                {
                    b.HasOne("RecipeBook.Models.Dish", "Dish")
                        .WithOne()
                        .HasForeignKey("RecipeBook.Models.Favorite", "DishId")
                        .IsRequired();

                    b.Navigation("Dish");
                });

            modelBuilder.Entity("RecipeBook.Models.Cookery", b =>
                {
                    b.Navigation("Dishes");
                });
#pragma warning restore 612, 618
        }
    }
}
